#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 722 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Section 2.4.3: Data-Directed Programming and Additivity"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"common.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.73"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";   Section [2.3.2] described a program that performs symbolic"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";   differentiation:"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 27 #";   (define (deriv exp var)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";     (cond ((number? exp) 0)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";           ((variable? exp) (if (same-variable? exp var) 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";           ((sum? exp)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";            (make-sum (deriv (addend exp) var)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";                      (deriv (augend exp) var)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";           ((product? exp)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";            (make-sum"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";              (make-product (multiplier exp)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                            (deriv (multiplicand exp) var))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";              (make-product (deriv (multiplier exp) var)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";                            (multiplicand exp))))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";           <more rules can be added here>"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";           (else (error \"unknown expression type -- DERIV\" exp)))"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   We can regard this program as performing a dispatch on the type "
 #"of the"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   expression to be differentiated.  In this situation the \"type t"
 #"ag\" of"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   the datum is the algebraic operator symbol (such as +) and the o"
 #"peration"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";   being performed is deriv.  We can transform this program into"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";   data-directed style by rewriting the basic derivative procedure "
 #"as"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 27 #";   (define (deriv exp var)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";      (cond ((number? exp) 0)"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";            ((variable? exp) (if (same-variable? exp var) 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";            (else ((get 'deriv (operator exp)) (operands exp)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                                               var))))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (define (operator exp) (car exp))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (define (operands exp) (cdr exp))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   a.  Explain what was done above. Why can't we assimilate the pre"
 #"dicates"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";   number? and same-variable? into the data-directed dispatch?"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   b.  Write the procedures for derivatives of sums and products, a"
 #"nd the"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   auxiliary code required to install them in the table used by the"
 #" program"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";   above."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   c.  Choose any additional differentiation rule that you like, su"
 #"ch as"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";   the one for exponents (exercise [2.56]), and install it in this"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";   data-directed system."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   d.  In this simple algebraic manipulator the type of an expressi"
 #"on is"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   the algebraic operator that binds it together.  Suppose, however"
 #", we"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   indexed the procedures in the opposite way, so that the dispatch"
 #" line in"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";   deriv looked like"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 52 #";   ((get (operator exp) 'deriv) (operands exp) var)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   What corresponding changes to the derivative system are required"
 #"?"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.73]: http://sicp-book.com/book-Z-H-17.html#%_thm_2.7"
 #"3"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";   [Section 2.3.2]: http://sicp-book.com/book-Z-H-16.html#%_sec_2.3"
 #".2"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.56]: http://sicp-book.com/book-Z-H-17.html#%_thm_2.5"
 #"6"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";   2.4.3 Data-Directed Programming and Additivity - p184"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"2.73\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"prn"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 72
(
 #"Well, it looks like we put the functions that symbolically different"
 #"iate"
) 0 0 19 29 1 #"\n"
0 0 19 3 54 #"various operators and put them in a table. (Struggling"
0 0 19 3 22 #", the question kind of"
0 0 19 29 1 #"\n"
0 0 19 3 64
#"explains what we've done.)  It's not necessary to put number? or"
0 0 19 29 1 #"\n"
0 0 19 3 75
(
 #"same-variable? in the table as there's only one implementation of ea"
 #"ch that"
) 0 0 19 29 1 #"\n"
0 0 19 3 72
(
 #"is not dependent on any operator.  So perhaps it is 'impossible' bec"
 #"ause"
) 0 0 19 29 1 #"\n"
0 0 19 3 47 #"there is no operator to use ast the second key."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"b:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"(define (deriv-sum operands)"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"  (make-sum (deriv (car operands) var)"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"            (deriv (cadr operands) var)))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"(define (deriv-prod operands)"
0 0 19 29 1 #"\n"
0 0 19 3 35 #"  (let ((multiplier (car operands))"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"        (multiplicand "
0 0 19 3 20 #"(cadr operands)))   "
0 0 19 29 1 #"\n"
0 0 19 3 13 #"    (make-sum"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"     (make-product multiplier"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                   (deriv multiplicand var))"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"     (make-product (deriv multiplier var)"
0 0 19 29 1 #"\n"
0 0 19 3 35 #"                   multiplicand))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 26 #"(put 'deriv '* deriv-prod)"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"c:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"(define (deriv-exp operands)"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"  (let ((base (car operands))"
0 0 19 29 1 #"\n"
0 0 19 3 35 #"        (exponent (cadr operands)))"
0 0 19 29 1 #"\n"
0 0 19 3 74
(
 #"    (make-product exponent (make-exponent base (make-sum exponent '-"
 #"1)))))"
) 0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 26 #"(put 'deriv '** deriv-exp)"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"d:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 61
#"There would be no differences except to the 'put' statements."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"2.73\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ================================================================"
 #"========"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.74"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   Insatiable Enterprises, Inc., is a highly decentralized conglome"
 #"rate"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   company consisting of a large number of independent divisions lo"
 #"cated"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   all over the world.  The company's computer facilities have just"
 #" been"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";   interconnected by means of a clever network-interfacing scheme t"
 #"hat"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   makes the entire network appear to any user to be a single compu"
 #"ter."
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   Insatiable's president, in her first attempt to exploit the abil"
 #"ity of"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   the network to extract administrative information from division "
 #"files,"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   is dismayed to discover that, although all the division files ha"
 #"ve been"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   implemented as data structures in Scheme, the particular data st"
 #"ructure"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   used varies from division to division.  A meeting of division ma"
 #"nagers"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   is hastily called to search for a strategy to integrate the file"
 #"s that"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   will satisfy headquarters' needs while preserving the existing a"
 #"utonomy"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";   of the divisions."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 66
#";   Show how such a strategy can be implemented with data-directed"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";   programming.  As an example, suppose that each division's person"
 #"nel"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   records consist of a single file, which contains a set of record"
 #"s keyed"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   on employees' names.  The structure of the set varies from divis"
 #"ion to"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";   division.  Furthermore, each employee's record is itself a set"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";   (structured differently from division to division) that contains"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";   information keyed under identifiers such as address and salary. "
 #" In"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";   particular:"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   a.  Implement for headquarters a get-record procedure that retri"
 #"eves a"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   specified employee's record from a specified personnel file.  Th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   procedure should be applicable to any division's file. Explain h"
 #"ow the"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   individual divisions' files should be structured.  In particular"
 #", what"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";   type information must be supplied?"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   b.  Implement for headquarters a get-salary procedure that retur"
 #"ns the"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   salary information from a given employee's record from any divis"
 #"ion's"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   personnel file.  How should the record be structured in order to"
 #" make"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";   this operation work?"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   c.  Implement for headquarters a find-employee-record procedure."
 #" This"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";   should search all the divisions' files for the record of a given"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   employee and return the record.  Assume that this procedure take"
 #"s as"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   arguments an employee's name and a list of all the divisions' fi"
 #"les."
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   d.  When Insatiable takes over a new company, what changes must "
 #"be made"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   in order to incorporate the new personnel information into the c"
 #"entral"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #";   system?"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.74]: http://sicp-book.com/book-Z-H-17.html#%_thm_2.7"
 #"4"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";   2.4.3 Data-Directed Programming and Additivity - p185"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"2.74\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"prn"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"Foreach different file we need to a number of file specificic"
0 0 19 29 1 #"\n"
0 0 19 3 51 #"functions: get-record, get-salary, get-address, ..."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 75
(
 #"We then want to make some generic (oops, I mean data-driven) functio"
 #"ns that"
) 0 0 19 29 1 #"\n"
0 0 19 3 76
(
 #"wrap the specific functions.  When getting complete records we need "
 #"a key to"
) 0 0 19 29 1 #"\n"
0 0 19 3 72
(
 #"find the right function.  We could use the filename, but that that's"
 #" not"
) 0 0 19 29 1 #"\n"
0 0 19 3 75
(
 #"cool.  So we need a format identifier.  Where do we get that from?  "
 #"Well we"
) 0 0 19 29 1 #"\n"
0 0 19 3 71
(
 #"could have a table of file-name -> format, or put it in the file.  I"
 #"'ll"
) 0 0 19 29 1 #"\n"
0 0 19 3 68
#"assume we can add this one piece of data to each company file.  When"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"co"
0 0 19 3 73
(
 #"nsuming records we need to have the record tagged with this key agai"
 #"n, so"
) 0 0 19 29 1 #"\n"
0 0 19 3 59
#"we can lookup the appropriate function to extract the data."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"a:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 3 34 #"(define (get-record file emp-name)"
0 0 19 29 1 #"\n"
0 0 19 3 40 #"  (define format (get-file-format file))"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"  (define get-record (get 'get-record format))"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"  (define record (get-record file emp-name))"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"  (if record"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"    (tag-format-type record for"
0 0 19 3 1 #"m"
0 0 19 3 3 #"at)"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"    #f))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 47 #"I'll let George worry about the implementation."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"b:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 3 27 #"(define (get-salary record)"
0 0 19 29 1 #"\n"
0 0 19 3 42 #"  (define format (get-format-type record))"
0 0 19 29 1 #"\n"
0 0 19 3 52 #"  (define local-get-salary (get 'get-salary format))"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"  (define local-record (get-content record))"
0 0 19 29 1 #"\n"
0 0 19 3 34 #"  (local-get-salary local-record))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"I'll let George worry about"
0 0 19 3 20 #" the implementation."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"c:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 3 45 #"(define (find-employee-record employee files)"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"  (if (empty? files)"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"    #f"
0 0 19 29 1 #"\n"
0 0 19 3 53 #"    (let ((record (get-record (car files) employee)))"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"      (if record"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"        record"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"        (find-employee-record (cdr files))))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"I'll let George worry about"
0 0 19 3 20 #" the implementation."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"d:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"=="
0 0 19 29 1 #"\n"
0 0 19 3 31 #"When a new company is acquired:"
0 0 19 29 1 #"\n"
0 0 19 3 72
(
 #"  - The new company needs to add a unique format identifier to its f"
 #"ile."
) 0 0 19 29 1 #"\n"
0 0 19 3 75
(
 #"  - Company specific functions need to be added to the database, get"
 #"-record"
) 0 0 19 29 1 #"\n"
0 0 19 3 74
(
 #"    to get the employee record, and a getter for each required datum"
 #", e.g."
) 0 0 19 29 1 #"\n"
0 0 19 3 20 #"    salary, address."
0 0 19 29 1 #"\n"
0 0 19 3 76
(
 #"  - Once the new company's file is available on the network then it "
 #"needs to"
) 0 0 19 29 1 #"\n"
0 0 19 3 37 #"    be added to the files collection."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.74"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ================================================================"
 #"========"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.75"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   Implement the constructor make-from-mag-ang in message-passing s"
 #"tyle."
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   This procedure should be analogous to the make-from-real-imag pr"
 #"ocedure"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";   given above."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.75]: http://sicp-book.com/book-Z-H-17.html#%_thm_2.7"
 #"5"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";   2.4.3 Data-Directed Programming and Additivity - p187"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.75"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 24 3 2 #") "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Unknown op -- MAKE-FROM-MAG-ANG\""
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"prn"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"With r=10, a=1\""
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Expect x = 5."
0 0 19 3 17 #"403023058, got: \""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Expect y = 8.414709848, got: \""
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.75"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ================================================================"
 #"========"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.76"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   As a large system with generic operations evolves, new types of "
 #"data"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";   objects or new operations may be needed.  For each of the three"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   strategies -- generic operations with explicit dispatch, data-di"
 #"rected"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   style, and message-passing-style -- describe the changes that mu"
 #"st be"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   made to a system in order to add new types or new operations.  W"
 #"hich"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   organization would be most appropriate for a system in which new"
 #" types"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   must often be added?  Which would be most appropriate for a syst"
 #"em in"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #";   which new operations must often be added?"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.76]: http://sicp-book.com/book-Z-H-17.html#%_thm_2.7"
 #"6"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";   2.4.3 Data-Directed Programming and Additivity - p187"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.76"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"2.76\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
