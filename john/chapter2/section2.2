#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 407 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; Section 2.5.1: Generic Arithmetic Operations"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"common.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.77"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   Louis Reasoner tries to evaluate the expression (magnitude z) wh"
 #"ere z is"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";   the object shown in figure [2.24].  To his surprise, instead of "
 #"the"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   answer 5 he gets an error message from apply-generic, saying the"
 #"re is no"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   method for the operation magnitude on the types (complex). He sh"
 #"ows this"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";   interaction to Alyssa P. Hacker, who says \"The problem is that "
 #"the"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   complex-number selectors were never defined for complex numbers,"
 #" just"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   for polar and rectangular numbers.  All you have to do to make t"
 #"his work"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #";   is add the following to the complex package:\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";   (put 'real-part '(complex) real-part)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";   (put 'imag-part '(complex) imag-part)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";   (put 'magnitude '(complex) magnitude)"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";   (put 'angle '(complex) angle)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   Describe in detail why this works.  As an example, trace through"
 #" all the"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   procedures called in evaluating the expression (magnitude z) whe"
 #"re z is"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   the object shown in figure [2.24].  In particular, how many time"
 #"s is"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   apply-generic invoked?  What procedure is dispatched to in each "
 #"case?"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.77]: http://sicp-book.com/book-Z-H-18.html#%_thm_2.7"
 #"7"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Figure 2.24]:   http://sicp-book.com/book-Z-H-18.html#%_fig_2.2"
 #"4"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";   2.5.1 Generic Arithmetic Operations - p192"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"2.77\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"prn"
0 0 24 3 1 #" "
0 0 19 3 75
(
 #"\"First, why it didn't work originally...  We have two levels of abs"
 #"traction"
) 0 0 19 29 1 #"\n"
0 0 19 3 70
(
 #"First we use a generic apply to deal with the two ways of representi"
 #"ng"
) 0 0 19 29 1 #"\n"
0 0 19 3 74
(
 #"complex numbers.  This allows magnitude to be called on types 'recta"
 #"ngular"
) 0 0 19 29 1 #"\n"
0 0 19 3 73
(
 #"and 'polar.  However we are now working at a higher level of abstrac"
 #"tion,"
) 0 0 19 29 1 #"\n"
0 0 19 3 61
#"'complex, and we have not defined a operator to work on this."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 73
(
 #"Alyssa's solution installs the magnitude operation for the 'complex "
 #"type,"
) 0 0 19 29 1 #"\n"
0 0 19 3 73
(
 #"the apply-generic function will then unpackage the 'rectanglar or 'p"
 #"oloar"
) 0 0 19 29 1 #"\n"
0 0 19 3 69
(
 #"object from within the 'complex type so it can be used with the lowe"
 #"r"
) 0 0 19 29 1 #"\n"
0 0 19 3 12 #"abstraction."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"(magnitude z)"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"-> (apply-generic 'magnitude z)"
0 0 19 29 1 #"\n"
0 0 19 3 69
(
 #"-> (magnitude r)  # where c is the (rectangular tagged) content of z"
 #"."
) 0 0 19 29 1 #"\n"
0 0 19 3 31 #"-> (apply-generic 'magnitude c)"
0 0 19 29 1 #"\n"
0 0 19 3 62
#"-> (magnitude r)  # where r is raw rectangular representation."
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.77"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ================================================================"
 #"========"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.78"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   The internal procedures in the scheme-number package are essenti"
 #"ally"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   nothing more than calls to the primitive procedures +, -, etc.  "
 #"It was"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   not possible to use the primitives of the language directly beca"
 #"use our"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   type-tag system requires that each data object have a type attac"
 #"hed to"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   it.  In fact, however, all Lisp implementations do have a type s"
 #"ystem,"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";   which they use internally. Primitive predicates such as symbol? "
 #"and"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   number? determine whether data objects have particular types.  M"
 #"odify"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";   the definitions of type-tag, contents, and attach-tag from secti"
 #"on"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   [2.4.2] so that our generic system takes advantage of Scheme's i"
 #"nternal"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   type system.  That is to say, the system should work as before e"
 #"xcept"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";   that ordinary numbers should be represented simply as Scheme num"
 #"bers"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";   rather than as pairs whose car is the symbol scheme-number."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.78]: http://sicp-book.com/book-Z-H-18.html#%_thm_2.7"
 #"8"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";   [Section 2.4.2]: http://sicp-book.com/book-Z-H-17.html#%_sec_2.4"
 #".2"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";   2.5.1 Generic Arithmetic Operations - p193"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.78"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"prn"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 1 #"("
0 0 19 3 6 #"define"
0 0 19 3 2 #" ("
0 0 19 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 19 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 19 3 8 #"contents"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  ("
0 0 19 3 2 #"if"
0 0 19 3 2 #" ("
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 13 #"scheme-number"
0 0 19 3 1 #" "
0 0 19 3 8 #"type-tag"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 19 3 8 #"contents"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"      ("
0 0 19 3 4 #"cons"
0 0 19 3 1 #" "
0 0 19 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 19 3 8 #"contents"
0 0 19 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"("
0 0 19 3 6 #"define"
0 0 19 3 2 #" ("
0 0 19 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  ("
0 0 19 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"    (("
0 0 19 3 7 #"number?"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 2 #") "
0 0 19 3 1 #"'"
0 0 19 3 13 #"scheme-number"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"    (("
0 0 19 3 5 #"pair?"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 3 #") ("
0 0 19 3 3 #"car"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"    ("
0 0 19 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 3 5 #"error"
0 0 19 3 1 #" "
0 0 19 3 5 #"\\\"Bad"
0 0 19 3 1 #" "
0 0 19 3 6 #"tagged"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 1 #" "
0 0 19 3 10 #"TYPE-TAG\\\""
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"("
0 0 19 3 6 #"define"
0 0 19 3 2 #" ("
0 0 19 3 8 #"contents"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  ("
0 0 19 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"    (("
0 0 19 3 7 #"number?"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 2 #") "
0 0 19 3 5 #"datum"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"    (("
0 0 19 3 5 #"pair?"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 3 #") ("
0 0 19 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"    ("
0 0 19 3 5 #"error"
0 0 19 3 1 #" "
0 0 19 3 5 #"\\\"Bad"
0 0 19 3 1 #" "
0 0 19 3 6 #"tagged"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 1 #" "
0 0 19 3 10 #"CONTENTS\\\""
0 0 19 3 1 #" "
0 0 19 3 8 #"datum)))"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.78"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ================================================================"
 #"========"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.79"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";   Define a generic equality predicate equ? that tests the equality"
 #" of two"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";   numbers, and install it in the generic arithmetic package.  This"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   operation should work for ordinary numbers, rational numbers, an"
 #"d"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";   complex numbers."
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.79]: http://sicp-book.com/book-Z-H-18.html#%_thm_2.7"
 #"9"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";   2.5.1 Generic Arithmetic Operations - p193"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.79"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.79"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ================================================================"
 #"========"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   Exercise 2.80"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   ============="
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   Define a generic predicate =zero? that tests if its argument is "
 #"zero,"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   and install it in the generic arithmetic package.  This operatio"
 #"n should"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   work for ordinary numbers, rational numbers, and complex numbers"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";   [Exercise 2.80]: http://sicp-book.com/book-Z-H-18.html#%_thm_2.8"
 #"0"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";   2.5.1 Generic Arithmetic Operations - p193"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   ----------------------------------------------------------------"
 #"--------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"-start-"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2.80"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"--end--"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"2.80\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
