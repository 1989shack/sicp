#lang racket

; Chapter 1 Redux

(require "util.rkt")

;   ========================================================================
;   ========================================================================
;   
;   Exercise 1.1
;   ============
;   
;   Below is a sequence of expressions. What is the result printed by the
;   interpreter in response to each expression?  Assume that the sequence is
;   to be evaluated in the order in which it is presented.
;   
;   10
;   (+ 5 3 4)
;   (- 9 1)
;   (/ 6 2)
;   (+ (* 2 4) (- 4 6))
;   (define a 3)
;   (define b (+ a 1))
;   (+ a b (* a b))
;   (= a b)
;   (if (and (< b a) (< b (* a b)))
;       b
;       a)
;   (cond ((= a 4) 6)
;         ((= b 4) (+ 6 7 a))
;         (else 25))
;   (+ 2 (if (< b a) b a))
;   (* (cond ((< a b) a)
;            ((< a b) b)
;            (else -1))
;      (+ a 1))
;   
;   
;   ------------------------------------------------------------------------
;   [Exercise 1.1]: http://sicp-book.com/book-Z-H-10.html#%_thm_1.1
;   ------------------------------------------------------------------------

(output "1.1")

(prn
 ""
 "Predicted:"
 "10"
 "8"
 "12"
 "3"
 "6"
 "-"
 "-"
 "19"
 "#false"
 "4"
 "16"
 "6"
 "16"
 "")

(prn
 "Actual:"
 10
 (+ 5 3 4)
 (- 9 1)
 (/ 6 2)
 (+ (* 2 4) (- 4 6)))
(define a 3)
(define b (+ a 1))
(prn
 (+ a b (* a b))
 (= a b)
 (if (and (> b a) (< b (* a b)))
     b
     a)
 
 (cond ((= a 4) 6)
       ((= b 4) (+ 6 7 a))
       (else 25))
 
 (+ 2 (if (> b a) b a))
 
 (* (cond ((> a b) a)
          ((< a b) b)
          (else -1))
    (+ a 1)))

(end)

;>  ----------------------------------------------------------------------------
;>  Output: Exercise 1.1
;>  ----------------------------------------------------------------------------
;>  
;>  
;>  Predicted:
;>  10
;>  8
;>  12
;>  3
;>  6
;>  -
;>  -
;>  19
;>  #false
;>  4
;>  16
;>  6
;>  16
;>  
;>  Actual:
;>  10
;>  12
;>  8
;>  3
;>  6
;>  19
;>  #f
;>  4
;>  16
;>  6
;>  16
;>  ----------------------------------------------------------------------------



;   ========================================================================
;   
;   Exercise 1.2
;   ============
;   
;   Translate the following expression into prefix form
;   
;   5 + 4 + (2 - (3 - (6 + 4/5)))
;   -----------------------------
;          3(6 - 2)(2 - 7)
;   
;   ------------------------------------------------------------------------
;   [Exercise 1.2]: http://sicp-book.com/book-Z-H-10.html#%_thm_1.2
;   ------------------------------------------------------------------------

(output "1.2")

(prn
 "Predicted: -37/150"
 ""
 (str "Actual: "
 (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
    (* 3 (- 6 2) (- 2 7))))
)

(end)

;>  ----------------------------------------------------------------------------
;>  Output: Exercise 1.2
;>  ----------------------------------------------------------------------------
;>  
;>  Predicted: -37/150
;>  
;>  Actual: -37/150
;>  ----------------------------------------------------------------------------



;   ========================================================================
;   
;   Exercise 1.3
;   ============
;   
;   Define a procedure that takes three numbers as arguments and returns the
;   sum of the squares of the two larger numbers.
;   
;   ------------------------------------------------------------------------
;   [Exercise 1.3]: http://sicp-book.com/book-Z-H-10.html#%_thm_1.3
;   ------------------------------------------------------------------------

(output "1.3")

(define (sum-of-square-of-two-largest a b c)
  (define (square x) (* x x))
  (define (sum-square a b)
    (+ (square a) (square b)))
  (if (< a b)
      (if (< a c)
          (sum-square b c)
          (sum-square b a))
      (if (< b c)
          (sum-square a c)
          (sum-square a b))))

(present sum-of-square-of-two-largest
          '( (3  4  5) 41)
          '( (13 12 5) 313)
          '( (7  4 17) 338))
 
(end)

;>  ----------------------------------------------------------------------------
;>  Output: Exercise 1.3
;>  ----------------------------------------------------------------------------
;>  
;>  Calling: sum-of-square-of-two-largest
;>  
;>      With: (3 4 5)
;>      Expected: 41
;>      Actual:   41
;>  
;>      With: (13 12 5)
;>      Expected: 313
;>      Actual:   313
;>  
;>      With: (7 4 17)
;>      Expected: 338
;>      Actual:   338
;>  
;>  ----------------------------------------------------------------------------



