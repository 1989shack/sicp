#lang Racket
(require "util-v2.rkt")

; Database of Questions

; Text-Friendly version of Questions

; Easy to consume Racket version
;   - eval to get text to cut and past
;   - output question to interactive

; Convert Definitions + Interactive -> MD







; 1.1  The Elements of Programming
; ================================

; https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1


;#########################################################################
;#########################################################################

(Exercise "1.1")

; https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.6

(exercise "Exercise 1.1.  Below is a sequence of expressions. What is the result
printed by the interpreter in response to each expression? Assume that
the sequence is to be evaluated in the order in which it is presented.

10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))")

;(prn
; (str "expresion: " "10")
; (str "guess:     " "10")
; (str "actual:    " 10)
; (str)
; (str "expresion: " "(+ 5 3 4)")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "(- 9 1)")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "(/ 6 2)")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "(+ (* 2 4) (- 4 6))")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "(define a 3)")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "(define b (+ a 1))")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "(+ a b (* a b))")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "(if (and (> b a) (< b (* a b)))")
; (str "                  b")
; (str "                  a)")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
; (str "expresion: " "")
; (str "guess:     " "")
; (str "actual:    " )
; (str)
;)